/*******************************
***** SECTION 1 - OPTIONS *****
*******************************/

options {
    JAVA_UNICODE_ESCAPE = true;
    IGNORE_CASE = true;
    DEBUG_PARSER = true;
 }

/*********************************
***** SECTION 2 - USER CODE *****
*********************************/

PARSER_BEGIN(AssignmentTokeniser)
public class AssignmentTokeniser {
    public static void main(String args[]) {
        AssignmentTokeniser tokeniser;
        if (args.length == 0) {
            System.out.println("Reading from standard input . . .");
            tokeniser = new AssignmentTokeniser(System.in);
        } else if (args.length == 1) {
            try {
                tokeniser = new AssignmentTokeniser(new java.io.FileInputStream(args[0]));
            } catch (java.io.FileNotFoundException e) {
                System.err.println("File " + args[0] + " not found.");
                return;
            }
        } else {
            System.out.println("Assignment Tokeniser: Usage is one of:");
            System.out.println(" java AssignmentTokeniser < inputfile");
            System.out.println("OR");
            System.out.println(" java AssignmentTokeniser inputfile");
            return;
        }

        try {
            tokeniser.Prog();
            System.out.println("Assignment Parser: Tokeniser program parsed successfully.");
        } catch (ParseException e) {
            System.out.println(e.getMessage());
            System.out.println("Assignment Parser: Encountered errors during parse.");
        }
    }
}
PARSER_END(AssignmentTokeniser)

/*****************************************
***** SECTION 3 - TOKEN DEFINITIONS *****
*****************************************/

TOKEN_MGR_DECLS :
{
static int commentNesting = 0;
}

SKIP : /*** Ignoring spaces/tabs/newlines ***/
{
    " "
    | "\t"
    | "\n"
    | "\r"
    | "\f"
}

SKIP : /* MULTI LINE COMMENTS */
{
    "/*" { commentNesting++; } : IN_MULTICOMMENT
}

SKIP : // SKIP ONE LINE
{
    <"//" (~["\n"])* "\n">
}

<IN_MULTICOMMENT> SKIP :
{
    "/*" { commentNesting++; }
    | "*/" { commentNesting--;
    if (commentNesting == 0)
        SwitchTo(DEFAULT);
    }
    | <~[]>
}

TOKEN : /* Keywords and punctuation */
{
    < SEMIC : ";" >
    | < COLON : ":" >
    | < PLUS_SIGN : "+" >
    | < MINUS_SIGN : "-" >
    | < TILDE :  "~" >
    | < PIPE : "|" >
    | < AMP : "&" >
    | < EQUAL : "=" >
    | < NOT_EQU : "!=" >
    | < LESS_THAN : "<" >
    | < LESS_THAN_EQ : "<=" >
    | < GREAT_THAN : ">" >
    | < GREAT_THAN_EQ : ">=" >
    | < ASSIGN : ":=" >
    | < LBR : "(" >
    | < RBR : ")" >
    | < COMMA : "," >
    | < VARIABLE : "variable" >
    | < CONSTANT : "constant" >
    | < RETURN : "return" >
    | < INTEGER : "integer" >
    | < BOOLEAN : "boolean" >
    | < VOID : "void" >
    | < MAIN : "main" >
    | < IF : "if" >
    | < ELSE : "else" >
    | < TRUE : "true" >
    | < FALSE : "false" >
    | < WHILE : "while" >
    | < BEGIN : "begin" >
    | < END : "end" >
    | < IS : "is" >
    | < SK : "skip" >
}

TOKEN : /* Numbers and identifiers */
{
< NUM : "0" | (<MINUS_SIGN>)(["1" - "9"])*(<DIGIT>)* | ["1" - "9"](<DIGIT>)* >
| < DIGIT : ["0" - "9"] >
| < ID : <LETTER> ( <LETTER> | <DIGIT> | <UNDERSC> )* >
| < UNDERSC : "_" >
| < LETTER : ["a" - "z", "A" - "Z"] >
}

/***********************************
***** SECTION 4 - THE GRAMMAR *****
***********************************/

void Prog() : {}
{
    DeclarationList() FunctionList() Main()
}

void DeclarationList() : {}
{
    (Declaration()<SEMIC>DeclarationList() | {})
}

void Declaration() : {}
{
    VariableDeclaration()
    | ConstantDeclaration()
}

void VariableDeclaration() : {}
{
    <VARIABLE> <ID><COLON>Type()
}

void ConstantDeclaration() : {}
{
    <CONSTANT> <ID><COLON>Type() <ASSIGN> Expression()
}

void FunctionList() : {}
{
    (Function()FunctionList() | {})
}

void Function() : {}
{
    Type() <ID> <LBR> (ParameterList()) <RBR> <IS>
    DeclarationList()
    <BEGIN>
    StatementBlock()
    <RETURN> <LBR>Expression() | {}<RBR><SEMIC>
    <END>
}

void Type() : {}
{
    (<INTEGER> | <BOOLEAN> | <VOID>)
}

void ParameterList(): {}
{
    NempParameterList() | {}
}

void NempParameterList() : {}
{
    <ID> <COLON> Type() (<COMMA> <ID> <COLON> Type())+
}

void Main() : {}
{
    <MAIN>
    <BEGIN>
    DeclarationList()
    StatementBlock()
    <END>
}

void StatementBlock() : {}
{
    (Statement() StatementBlock()) | {}
}

void Statement() : {}
{
    <ID> (<ASSIGN> Expression() | Arg())<SEMIC>
    | <BEGIN> StatementBlock() <END>
    | <IF> Condition() <BEGIN> StatementBlock() <END>
      <ELSE> <BEGIN> StatementBlock() <END>
    | <WHILE> Condition() <BEGIN> StatementBlock() <END>
    | <SK><SEMIC>
}

void Expression() : {}
{
    <ID> Expression2()
    | Fragment() (BinaryArithOp() Fragment())*
}

void Expression2() : {}
{
    (<LBR> ArgList() <RBR>)
    | (BinaryArithOp() Expression() | {})

}

void Arg() : {}
{
  <LBR>ArgList()<RBR>
}

void BinaryArithOp() : {}
{
    <PLUS_SIGN>
    | <MINUS_SIGN>
}

void Fragment() : {}
{
     <MINUS_SIGN> <ID>
    | <NUM>
    | <TRUE>
    | <FALSE>
    | <LBR>Expression()<RBR>
}

void Condition() : {}
{
  <LBR> Condition() <RBR> Condition2()
  | <TILDE> Condition() Condition2()
  | Expression() ComparisonOp() Expression() Condition2()
}

void Condition2() : {}
{
   (<PIPE> | <AMP>) Condition()
  | {}
}

void ComparisonOp() : {}
{
    <EQUAL>
    | <NOT_EQU>
    | <LESS_THAN>
    | <LESS_THAN_EQ>
    | <GREAT_THAN>
    | <GREAT_THAN_EQ>
}

void ArgList() : {}
{
    NempArgList()
    | {}
}

void NempArgList() : {}
{
    <ID> (<COMMA> <ID>)*
}
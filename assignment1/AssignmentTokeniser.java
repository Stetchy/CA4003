package assignment1;

/* Generated By:JavaCC: Do not edit this line. AssignmentTokeniser.java */
public class AssignmentTokeniser implements AssignmentTokeniserConstants {
    public static void main(String args[]) {
        AssignmentTokeniser tokeniser;
        if (args.length == 0) {
            System.out.println("Reading from standard input . . .");
            tokeniser = new AssignmentTokeniser(System.in);
        } else if (args.length == 1) {
            try {
                tokeniser = new AssignmentTokeniser(new java.io.FileInputStream(args[0]));
            } catch (java.io.FileNotFoundException e) {
                System.err.println("File " + args[0] + " not found.");
                return;
            }
        } else {
            System.out.println("Assignment Tokeniser: Usage is one of:");
            System.out.println(" java AssignmentTokeniser < inputfile");
            System.out.println("OR");
            System.out.println(" java AssignmentTokeniser inputfile");
            return;
        }

        try {
            tokeniser.Prog();
            System.out.println("Assignment Parser: Tokeniser program parsed successfully.");
        } catch (ParseException e) {
            System.out.println(e.getMessage());
            System.out.println("Assignment Parser: Encountered errors during parse.");
        }
    }

/***********************************
***** SECTION 4 - THE GRAMMAR *****
***********************************/
  static final public void Prog() throws ParseException {
    trace_call("Prog");
    try {
      DeclarationList();
      FunctionList();
      Main();
    } finally {
      trace_return("Prog");
    }
  }

  static final public void DeclarationList() throws ParseException {
    trace_call("DeclarationList");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VARIABLE:
      case CONSTANT:
        Declaration();
        jj_consume_token(SEMIC);
        DeclarationList();
        break;
      default:
        jj_la1[0] = jj_gen;

      }
    } finally {
      trace_return("DeclarationList");
    }
  }

  static final public void Declaration() throws ParseException {
    trace_call("Declaration");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VARIABLE:
        VariableDeclaration();
        break;
      case CONSTANT:
        ConstantDeclaration();
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("Declaration");
    }
  }

  static final public void VariableDeclaration() throws ParseException {
    trace_call("VariableDeclaration");
    try {
      jj_consume_token(VARIABLE);
      jj_consume_token(ID);
      jj_consume_token(COLON);
      Type();
    } finally {
      trace_return("VariableDeclaration");
    }
  }

  static final public void ConstantDeclaration() throws ParseException {
    trace_call("ConstantDeclaration");
    try {
      jj_consume_token(CONSTANT);
      jj_consume_token(ID);
      jj_consume_token(COLON);
      Type();
      jj_consume_token(ASSIGN);
      Expression();
    } finally {
      trace_return("ConstantDeclaration");
    }
  }

  static final public void FunctionList() throws ParseException {
    trace_call("FunctionList");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RBR:
      case INTEGER:
      case BOOLEAN:
      case VOID:
        Function();
        FunctionList();
        break;
      default:
        jj_la1[2] = jj_gen;

      }
    } finally {
      trace_return("FunctionList");
    }
  }

  static final public void Function() throws ParseException {
    trace_call("Function");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
      case BOOLEAN:
      case VOID:
        Type();
        jj_consume_token(ID);
        jj_consume_token(LBR);
        ParameterList();
        jj_consume_token(RBR);
        jj_consume_token(IS);
        DeclarationList();
        jj_consume_token(BEGIN);
        StatementBlock();
        jj_consume_token(RETURN);
        jj_consume_token(LBR);
        Expression();
        break;
      case RBR:

        jj_consume_token(RBR);
        jj_consume_token(SEMIC);
        jj_consume_token(END);
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("Function");
    }
  }

  static final public void Type() throws ParseException {
    trace_call("Type");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
        jj_consume_token(INTEGER);
        break;
      case BOOLEAN:
        jj_consume_token(BOOLEAN);
        break;
      case VOID:
        jj_consume_token(VOID);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("Type");
    }
  }

  static final public void ParameterList() throws ParseException {
    trace_call("ParameterList");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        NempParameterList();
        break;
      default:
        jj_la1[5] = jj_gen;

      }
    } finally {
      trace_return("ParameterList");
    }
  }

  static final public void NempParameterList() throws ParseException {
    trace_call("NempParameterList");
    try {
      jj_consume_token(ID);
      jj_consume_token(COLON);
      Type();
      label_1:
      while (true) {
        jj_consume_token(COMMA);
        jj_consume_token(ID);
        jj_consume_token(COLON);
        Type();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_1;
        }
      }
    } finally {
      trace_return("NempParameterList");
    }
  }

  static final public void Main() throws ParseException {
    trace_call("Main");
    try {
      jj_consume_token(MAIN);
      jj_consume_token(BEGIN);
      DeclarationList();
      StatementBlock();
      jj_consume_token(END);
    } finally {
      trace_return("Main");
    }
  }

  static final public void StatementBlock() throws ParseException {
    trace_call("StatementBlock");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case WHILE:
      case BEGIN:
      case SK:
      case ID:
        Statement();
        StatementBlock();
        break;
      default:
        jj_la1[7] = jj_gen;

      }
    } finally {
      trace_return("StatementBlock");
    }
  }

  static final public void Statement() throws ParseException {
    trace_call("Statement");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        jj_consume_token(ID);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASSIGN:
          jj_consume_token(ASSIGN);
          Expression();
          break;
        case LBR:
          Arg();
          break;
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(SEMIC);
        break;
      case BEGIN:
        jj_consume_token(BEGIN);
        StatementBlock();
        jj_consume_token(END);
        break;
      case IF:
        jj_consume_token(IF);
        Condition();
        jj_consume_token(BEGIN);
        StatementBlock();
        jj_consume_token(END);
        jj_consume_token(ELSE);
        jj_consume_token(BEGIN);
        StatementBlock();
        jj_consume_token(END);
        break;
      case WHILE:
        jj_consume_token(WHILE);
        Condition();
        jj_consume_token(BEGIN);
        StatementBlock();
        jj_consume_token(END);
        break;
      case SK:
        jj_consume_token(SK);
        jj_consume_token(SEMIC);
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("Statement");
    }
  }

  static final public void Expression() throws ParseException {
    trace_call("Expression");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        jj_consume_token(ID);
        Expression2();
        break;
      case MINUS_SIGN:
      case LBR:
      case TRUE:
      case FALSE:
      case NUM:
        Fragment();
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PLUS_SIGN:
          case MINUS_SIGN:
            ;
            break;
          default:
            jj_la1[10] = jj_gen;
            break label_2;
          }
          BinaryArithOp();
          Fragment();
        }
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("Expression");
    }
  }

  static final public void Expression2() throws ParseException {
    trace_call("Expression2");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBR:
        jj_consume_token(LBR);
        ArgList();
        jj_consume_token(RBR);
        break;
      default:
        jj_la1[13] = jj_gen;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS_SIGN:
        case MINUS_SIGN:
          BinaryArithOp();
          Expression();
          break;
        default:
          jj_la1[12] = jj_gen;

        }
      }
    } finally {
      trace_return("Expression2");
    }
  }

  static final public void Arg() throws ParseException {
    trace_call("Arg");
    try {
      jj_consume_token(LBR);
      ArgList();
      jj_consume_token(RBR);
    } finally {
      trace_return("Arg");
    }
  }

  static final public void BinaryArithOp() throws ParseException {
    trace_call("BinaryArithOp");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS_SIGN:
        jj_consume_token(PLUS_SIGN);
        break;
      case MINUS_SIGN:
        jj_consume_token(MINUS_SIGN);
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("BinaryArithOp");
    }
  }

  static final public void Fragment() throws ParseException {
    trace_call("Fragment");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS_SIGN:
        jj_consume_token(MINUS_SIGN);
        jj_consume_token(ID);
        break;
      case NUM:
        jj_consume_token(NUM);
        break;
      case TRUE:
        jj_consume_token(TRUE);
        break;
      case FALSE:
        jj_consume_token(FALSE);
        break;
      case LBR:
        jj_consume_token(LBR);
        Expression();
        jj_consume_token(RBR);
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("Fragment");
    }
  }

  static final public void Condition() throws ParseException {
    trace_call("Condition");
    try {
      if (jj_2_1(3)) {
        jj_consume_token(LBR);
        Condition();
        jj_consume_token(RBR);
        Condition2();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TILDE:
          jj_consume_token(TILDE);
          Condition();
          Condition2();
          break;
        case MINUS_SIGN:
        case LBR:
        case TRUE:
        case FALSE:
        case NUM:
        case ID:
          Expression();
          ComparisonOp();
          Expression();
          Condition2();
          break;
        default:
          jj_la1[16] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("Condition");
    }
  }

  static final public void Condition2() throws ParseException {
    trace_call("Condition2");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PIPE:
      case AMP:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PIPE:
          jj_consume_token(PIPE);
          break;
        case AMP:
          jj_consume_token(AMP);
          break;
        default:
          jj_la1[17] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        Condition();
        break;
      default:
        jj_la1[18] = jj_gen;

      }
    } finally {
      trace_return("Condition2");
    }
  }

  static final public void ComparisonOp() throws ParseException {
    trace_call("ComparisonOp");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUAL:
        jj_consume_token(EQUAL);
        break;
      case NOT_EQU:
        jj_consume_token(NOT_EQU);
        break;
      case LESS_THAN:
        jj_consume_token(LESS_THAN);
        break;
      case LESS_THAN_EQ:
        jj_consume_token(LESS_THAN_EQ);
        break;
      case GREAT_THAN:
        jj_consume_token(GREAT_THAN);
        break;
      case GREAT_THAN_EQ:
        jj_consume_token(GREAT_THAN_EQ);
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("ComparisonOp");
    }
  }

  static final public void ArgList() throws ParseException {
    trace_call("ArgList");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        NempArgList();
        break;
      default:
        jj_la1[20] = jj_gen;

      }
    } finally {
      trace_return("ArgList");
    }
  }

  static final public void NempArgList() throws ParseException {
    trace_call("NempArgList");
    try {
      jj_consume_token(ID);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[21] = jj_gen;
          break label_3;
        }
        jj_consume_token(COMMA);
        jj_consume_token(ID);
      }
    } finally {
      trace_return("NempArgList");
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_3R_19() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) return true;
    }
    return false;
  }

  static private boolean jj_3R_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) return true;
    }
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_scan_token(LBR)) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    if (jj_3R_12()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_13()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_9() {
    if (jj_scan_token(ID)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3R_7() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_9()) {
    jj_scanpos = xsp;
    if (jj_3R_10()) return true;
    }
    return false;
  }

  static private boolean jj_3R_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(18)) {
    jj_scanpos = xsp;
    if (jj_scan_token(19)) {
    jj_scanpos = xsp;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_20() {
    return false;
  }

  static private boolean jj_3R_6() {
    if (jj_3R_7()) return true;
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3R_5() {
    if (jj_scan_token(TILDE)) return true;
    if (jj_3R_4()) return true;
    return false;
  }

  static private boolean jj_3R_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3R_5()) {
    jj_scanpos = xsp;
    if (jj_3R_6()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_scan_token(LBR)) return true;
    if (jj_3R_4()) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_scan_token(LBR)) return true;
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_3R_17()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_scan_token(MINUS_SIGN)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(14)) return true;
    }
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public AssignmentTokeniserTokenManager token_source;
  static JavaCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[22];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x30000000,0x30000000,0x84000000,0x84000000,0x80000000,0x0,0x8000000,0x0,0x3000000,0x0,0x6000,0x2004000,0x6000,0x2000000,0x6000,0x2004000,0x200c000,0x30000,0x30000,0xfc0000,0x0,0x8000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x3,0x3,0x3,0x4000,0x0,0x4988,0x0,0x4988,0x0,0x5060,0x0,0x0,0x0,0x1060,0x5060,0x0,0x0,0x0,0x4000,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[1];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public AssignmentTokeniser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public AssignmentTokeniser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AssignmentTokeniserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public AssignmentTokeniser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new AssignmentTokeniserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public AssignmentTokeniser(AssignmentTokeniserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(AssignmentTokeniserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[49];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 22; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 49; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static private int trace_indent = 0;
  static private boolean trace_enabled = true;

/** Enable tracing. */
  static final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  static final public void disable_tracing() {
    trace_enabled = false;
  }

  static private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  static private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  static private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  static private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
